# automatically generated from https://github.com/metwork-framework/resources/blob/master/cookiecutter/_%7B%7Bcookiecutter.repo%7D%7D/mfxxx_drone.yml template



    
    



    
        
        
    


bootstrap_common: &bootstrap_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - mkdir -p /opt/metwork-mfext-$${TARGET_DIR}

    - ./bootstrap.sh /opt/metwork-mfext-$${TARGET_DIR}

    - cat adm/root.mk

    - CACHE_HASH=`/opt/metwork-mfext/bin/_build_cache_hash.sh .`

    - if ! test -f /buildcache/build_mfextaddon_python3_ia_${DRONE_BRANCH}_$${CACHE_HASH}; then echo $${CACHE_HASH} >.drone_cache; fi

build_common: &build_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if test "${DRONE_TAG}" = ""; then if ! test -f .drone_cache; then echo "step bypass"; exit 0; fi; fi
    - export METWORK_BUILD_OS=${OS_VERSION}

    - mkdir -p /opt/metwork-mfext-$${TARGET_DIR}
    - yum -y install metwork-mfext-layer-python3_scientific
    - wget https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel-0.25.2-installer-linux-x86_64.sh
    - chmod +x bazel-0.25.2-installer-linux-x86_64.sh
    - ./bazel-0.25.2-installer-linux-x86_64.sh
    - mkdir -p /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfextaddon_python3_ia/${OS_VERSION}/${DRONE_BUILD_NUMBER}
    - make >/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfextaddon_python3_ia/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
    - make test >>/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfextaddon_python3_ia/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
    - make RELEASE_BUILD=${DRONE_BUILD_NUMBER} rpm >>/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfextaddon_python3_ia/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
    - mv /opt/metwork-mfext-$${TARGET_DIR}/*.rpm .
  volumes:
    - /pub:/pub
    - /private:/private
    - /buildcache:/buildcache


publish_ci_common: &publish_ci_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if test "${DRONE_TAG}" = ""; then if ! test -f .drone_cache; then echo "step bypass"; touch .drone_downstream_bypass; exit 0; fi; fi
    - mkdir -p /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
    - cp *.rpm /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
    - createrepo --update /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}

    - touch /buildcache/build_mfextaddon_python3_ia_${DRONE_BRANCH}_`cat .drone_cache`
  volumes:
    - /pub:/pub
    - /private:/private
    - /buildcache:/buildcache


integration_tests_common: &integration_tests_common
  commands:
    - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
    - if test "${DRONE_TAG}" = ""; then if ! test -f .drone_cache; then echo "step bypass"; exit 0; fi; fi

    - echo -e "[metwork_$${DEP_BRANCH}]" >/etc/yum.repos.d/metwork.repo
    - echo -e "name=Metwork Continuous Integration Branch $${DEP_BRANCH}" >> /etc/yum.repos.d/metwork.repo
    - echo -e "baseurl=http://metwork-framework.org/pub/metwork/continuous_integration/rpms/$${DEP_BRANCH}/${OS_VERSION}/" >> /etc/yum.repos.d/metwork.repo
    - echo -e "gpgcheck=0\n\enabled=1\n\metadata_expire=0\n" >>/etc/yum.repos.d/metwork.repo
    - yum -y localinstall metwork-mfext*.rpm
    - yum -y install metwork-mfext-minimal
    - /opt/metwork-mfext/bin/mfext_wrapper ./run_integration_tests.sh



pipeline:
  bootstrap_integration_push:
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    environment:
      - DEP_DIR=master
      - TARGET_DIR=master
    <<: *bootstrap_common
    volumes:
      - /buildcache:/buildcache
    when:
      event: push
      branch: [ integration, ci_*, pci_* ]

  bootstrap_integration_pr:
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    environment:
      - TARGET_DIR=master
      - DEP_DIR=master
    <<: *bootstrap_common
    when:
      event: pull_request
      branch: integration
  bootstrap_integration_pr_release:
    image: metwork/mfcom-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_DIR=${DRONE_BRANCH##release_}
    <<: *bootstrap_common
    when:
      event: pull_request
      branch: [ release_* ]

  bootstrap:
    image: metwork/mfcom-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - DEP_DIR=${DRONE_BRANCH##release_}
      - TARGET_DIR=${DRONE_BRANCH##release_}
    <<: *bootstrap_common
    volumes:
      - /buildcache:/buildcache
    when:
      event: push
      branch: [ master, experimental*, release_* ]
  bootstrap_tag:
    image: metwork/mfcom-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - DEP_DIR=${DRONE_BRANCH##release_}
      - TARGET_DIR=${DRONE_BRANCH##release_}
    <<: *bootstrap_common
    volumes:
      - /buildcache:/buildcache
    when:
      event: tag
      ref: refs/tags/v*

  build_integration:
    <<: *build_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    environment:
      - TARGET_DIR=master
      - DEP_BRANCH=integration
    when:

      event: [push, pull_request]

      branch: [ integration, ci_*, pci_* ]
  build:
    <<: *build_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_BRANCH=${DRONE_BRANCH}
    when:

      event: [ push, pull_request ]

      branch: [ master, experimental*, release_* ]
  build_tag:
    <<: *build_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    environment:
      - TARGET_DIR=${DRONE_BRANCH##release_}
      - DEP_BRANCH=${DRONE_BRANCH}
    when:
      event: tag
      ref: refs/tags/v*


  integration_tests_integration:
    <<: *integration_tests_common
    image: centos:${OS_VERSION}
    environment:
      - DEP_BRANCH=integration
    when:
      event: [push, pull_request]
      branch: [ integration, ci_*, pci_* ]
  integration_tests:
    <<: *integration_tests_common
    image: centos:${OS_VERSION}
    environment:
      - DEP_BRANCH=${DRONE_BRANCH}
    when:

      event: [push, pull_request]

      branch: [  master, release_*, experimental* ]


  publish_ci_integration:
    <<: *publish_ci_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:integration
    when:
      event: push
      branch: [ integration, pci_* ]
  publish_ci:
    <<: *publish_ci_common
    image: metwork/mfcom-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    when:
      event: push
      branch: [ master, experimental*, release_* ]
  publish_tag:
    image: metwork/mfxxx-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    volumes:
      - /pub:/pub
      - /private:/private
    commands:
      - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
      - mkdir -p /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION}/
      - cp *.rpm /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION}/
      - createrepo --update /pub/metwork/releases/rpms/${DRONE_BRANCH}/${OS_VERSION}
      - if test "${OS_VERSION}" = "centos6"; then rm -Rf /pub/metwork/releases/docs/${DRONE_BRANCH}/mfextaddon_python3_ia; mkdir -p /pub/metwork/releases/docs/${DRONE_BRANCH}/mfextaddon_python3_ia ; if test -d html_doc; then cp -Rf html_doc/* /pub/metwork/releases/docs/${DRONE_BRANCH}/mfextaddon_python3_ia/ ; fi ; fi
    when:
      event: tag
      ref: refs/tags/v*





matrix:
  OS_VERSION:
    - centos7

branches: [ master, integration, experimental*, ci_*, pci_*, release_* ]
